{"ast":null,"code":"let characters = '';\nlet passwordLength = 0;\nconst setUpperCase = isUpperCase => {\n  if (isUpperCase) {\n    characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  }\n  return '';\n};\nconst setLowerCase = isLowerCase => {\n  if (isLowerCase) {\n    characters += 'abcdefghijklmnopqrstuvwxyz';\n  }\n  return '';\n};\nconst setSymbols = isSymbol => {\n  if (isSymbol) {\n    characters += '!@#$%^&*()<>,.?/[]{}-=_+|/';\n  }\n  return '';\n};\nconst setNumber = isNumeric => {\n  if (isNumeric) {\n    characters += '0123456789';\n  }\n  return '';\n};\nconst getRandomInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst passwordCharacters = () => {\n  const characterList = characters;\n  let password = '';\n  if (characterList.length > 0) {\n    for (let i = 0; i < passwordLength; i++) {\n      password += characterList[getRandomInteger(0, characterList.length - 1)];\n    }\n    characters = '';\n    passwordLength = 0;\n    return password;\n  }\n};\nexport const setPasswordLength = length => {\n  passwordLength = length;\n  return passwordLength;\n};\nexport const generatePasswordLength = () => {\n  return passwordLength;\n};\nexport const generatePassword = (passwordProps, pwdLength) => {\n  const {\n    uppercase,\n    lowercase,\n    symbols,\n    numbers\n  } = passwordProps;\n  setPasswordLength(pwdLength);\n  setUpperCase(uppercase);\n  setLowerCase(lowercase);\n  setSymbols(symbols);\n  setNumber(numbers);\n  const password = passwordCharacters();\n  return password;\n};\nexport const copyToClipBoard = elementRef => {\n  elementRef.select();\n  document.execCommand('copy');\n};","map":{"version":3,"names":["characters","passwordLength","setUpperCase","isUpperCase","setLowerCase","isLowerCase","setSymbols","isSymbol","setNumber","isNumeric","getRandomInteger","min","max","Math","floor","random","passwordCharacters","characterList","password","length","i","setPasswordLength","generatePasswordLength","generatePassword","passwordProps","pwdLength","uppercase","lowercase","symbols","numbers","copyToClipBoard","elementRef","select","document","execCommand"],"sources":["/Users/granticus/Desktop/Dev/React/password-generator/src/utils/Helper.js"],"sourcesContent":["let characters = '';\nlet passwordLength = 0;\n\nconst setUpperCase = isUpperCase => {\n    if (isUpperCase) {\n        characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n    return '';\n}\n\nconst setLowerCase = isLowerCase => {\n    if (isLowerCase) {\n        characters += 'abcdefghijklmnopqrstuvwxyz';\n    }\n    return '';\n}\n\nconst setSymbols = isSymbol => {\n    if (isSymbol) {\n        characters += '!@#$%^&*()<>,.?/[]{}-=_+|/';\n    }\n    return '';\n}\n\nconst setNumber = isNumeric => {\n    if (isNumeric) {\n        characters += '0123456789';\n    }\n    return '';\n}\n\nconst getRandomInteger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst passwordCharacters = () => {\n    const characterList = characters;\n    let password = '';\n    if (characterList.length > 0) {\n        for (let i = 0; i < passwordLength; i++) {\n            password += characterList[getRandomInteger(0, characterList.length - 1)];\n        }\n        characters = '';\n        passwordLength = 0;\n\n        return password;\n    }\n}\n\nexport const setPasswordLength = length => {\n    passwordLength = length;\n    return passwordLength;\n}\n\nexport const generatePasswordLength = () => {\n    return passwordLength;\n}\n\nexport const generatePassword = (passwordProps, pwdLength) => {\n    const { uppercase, lowercase, symbols, numbers } = passwordProps;\n\n    setPasswordLength(pwdLength);\n    setUpperCase(uppercase);\n    setLowerCase(lowercase);\n    setSymbols(symbols);\n    setNumber(numbers);\n\n    const password = passwordCharacters();\n    return password;\n}\n\nexport const copyToClipBoard = elementRef => {\n    elementRef.select();\n    document.execCommand('copy');\n}"],"mappings":"AAAA,IAAIA,UAAU,GAAG,EAAE;AACnB,IAAIC,cAAc,GAAG,CAAC;AAEtB,MAAMC,YAAY,GAAGC,WAAW,IAAI;EAChC,IAAIA,WAAW,EAAE;IACbH,UAAU,IAAI,4BAA4B;EAC9C;EACA,OAAO,EAAE;AACb,CAAC;AAED,MAAMI,YAAY,GAAGC,WAAW,IAAI;EAChC,IAAIA,WAAW,EAAE;IACbL,UAAU,IAAI,4BAA4B;EAC9C;EACA,OAAO,EAAE;AACb,CAAC;AAED,MAAMM,UAAU,GAAGC,QAAQ,IAAI;EAC3B,IAAIA,QAAQ,EAAE;IACVP,UAAU,IAAI,4BAA4B;EAC9C;EACA,OAAO,EAAE;AACb,CAAC;AAED,MAAMQ,SAAS,GAAGC,SAAS,IAAI;EAC3B,IAAIA,SAAS,EAAE;IACXT,UAAU,IAAI,YAAY;EAC9B;EACA,OAAO,EAAE;AACb,CAAC;AAED,MAAMU,gBAAgB,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;EACnC,OAAOC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,IAAIH,GAAG,GAAGD,GAAG,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG;AAC5D,CAAC;AAED,MAAMK,kBAAkB,GAAGA,CAAA,KAAM;EAC7B,MAAMC,aAAa,GAAGjB,UAAU;EAChC,IAAIkB,QAAQ,GAAG,EAAE;EACjB,IAAID,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;IAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnB,cAAc,EAAEmB,CAAC,EAAE,EAAE;MACrCF,QAAQ,IAAID,aAAa,CAACP,gBAAgB,CAAC,CAAC,EAAEO,aAAa,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC;IAC5E;IACAnB,UAAU,GAAG,EAAE;IACfC,cAAc,GAAG,CAAC;IAElB,OAAOiB,QAAQ;EACnB;AACJ,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAGF,MAAM,IAAI;EACvClB,cAAc,GAAGkB,MAAM;EACvB,OAAOlB,cAAc;AACzB,CAAC;AAED,OAAO,MAAMqB,sBAAsB,GAAGA,CAAA,KAAM;EACxC,OAAOrB,cAAc;AACzB,CAAC;AAED,OAAO,MAAMsB,gBAAgB,GAAGA,CAACC,aAAa,EAAEC,SAAS,KAAK;EAC1D,MAAM;IAAEC,SAAS;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGL,aAAa;EAEhEH,iBAAiB,CAACI,SAAS,CAAC;EAC5BvB,YAAY,CAACwB,SAAS,CAAC;EACvBtB,YAAY,CAACuB,SAAS,CAAC;EACvBrB,UAAU,CAACsB,OAAO,CAAC;EACnBpB,SAAS,CAACqB,OAAO,CAAC;EAElB,MAAMX,QAAQ,GAAGF,kBAAkB,EAAE;EACrC,OAAOE,QAAQ;AACnB,CAAC;AAED,OAAO,MAAMY,eAAe,GAAGC,UAAU,IAAI;EACzCA,UAAU,CAACC,MAAM,EAAE;EACnBC,QAAQ,CAACC,WAAW,CAAC,MAAM,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}